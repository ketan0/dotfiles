#+TITLE: <~~karabiner config~~>
#+AUTHOR: Ketan Agrawal
#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+PROPERTY: header-args :tangle ~/.dotfiles/karabiner.edn
Created by Ketan Agrawal

inspiration taken from:
- [[https://github.com/yqrashawn/yqdotfiles/blob/master/.config/karabiner.edn][yqrashawn]]
- [[https://github.com/nikitavoloboev/dotfiles/blob/master/karabiner/karabiner.edn][nikitavoloboev]]
- [[https://gist.github.com/kaushikgopal/ff7a92bbc887e59699c804b59074a126][kaushikgopal]]

* Guide
For more info on configuring Goku, see the [[https://github.com/yqrashawn/GokuRakuJoudo/blob/master/tutorial.md][tutorial]].
Guide lifted from [[https://gist.github.com/kaushikgopal/ff7a92bbc887e59699c804b59074a126][kaushikgopal]]. To understand better how modifiers work in karabiner, see the karabiner definition of mandatory and optional: [[https://karabiner-elements.pqrs.org/docs/json/complex-modifications-manipulator-definition/from/modifiers/#frommodifiersoptional   ][karabiner modifiers documentation]]
need to prefix C T O S F with ! or #
| Modifier | Meaning                                      |
|----------+----------------------------------------------|
| !        | mandatory (w/o modifier changes behavior)    |
| #        | optional (but at least one necessary)        |
| C        | left_command                                 |
| T        | left_control                                 |
| O        | left_option                                  |
| S        | left_shift                                   |
| F        | fn                                           |
| Q        | right_command                                |
| W        | right_control                                |
| E        | right_option                                 |
| R        | right_shift                                  |
| ##       | optional any                                 |
| !!       | command + control + optional + shift (hyper) |
* Profiles
#+begin_src clojure
{;;beginning bracket for whole data structure -- don't delete!

 :profiles {
            :Ketan {
                    :default true
                    :sim     500    ;; simultaneous_threshold_milliseconds (def: 50)
                    ;; keys need to be pressed within this threshold to be considered simultaneous
                    :delay   80    ;; to_delayed_action_delay_milliseconds (def: 500)
                    ;; basically it means time after which the key press is count delayed
                    :alone   500      ;; to_if_alone_timeout_milliseconds (def: 1000)
                    ;; hold for 995s and single tap registered; hold for 1005s and seen as modifier
                    :held    1000   ;; to_if_held_down_threshold_milliseconds (def: 500)
                    ;; key is fired twice when 500 ms is elapsed (otherwise seen as a hold command)
                    }
            } ;; profiles
#+end_src
 
* Templates
#+begin_src clojure
:templates {
            :km "osascript -e 'tell application \"Keyboard Maestro Engine\" to do script \"%s\"'"
            :open "open \"%s\""
            :alfred "osascript -e 'tell application \"Alfred 4\" to run trigger \"%s\" in workflow \"%s\" with argument \"%s\"'"
            } ;; templates

#+end_src
 
* Layers & Simlayers
#+begin_src clojure
:layers {

         :tab-mode {:key :tab
                    :afterup [{:set ["yabai-move-mode" 0]}
                              {:set ["yabai-focus-mode" 0]}
                              {:set ["yabai-display-mode" 0]}
                              {:set ["chrome-movement-mode" 0]}
                              {:set ["chrome-rearrange-tab-mode" 0]}]}

         :yabai-move-mode {:key :w :condi :tab-mode}
         :yabai-focus-mode {:key :f :condi :tab-mode}
         :yabai-display-mode {:key :d :condi :tab-mode}
         :chrome-movement-mode {:key :t :condi :tab-mode} ;;TODO make this work
         :chrome-history-mode {:key :g :condi :tab-mode} ;;TODO make this work
         :chrome-rearrange-tab-mode {:key :r :condi :tab-mode}
         :vim-mode {:key :z}
         :tilde-mode {:key :grave_accent_and_tilde}
}

:simlayers {
            :slash-mode {:key :slash}
            :jupyter-mode {:key :j}
            :o-key-mode {:key :o}
}

#+end_src
 
* Main
** begin main
#+begin_src clojure
:main [{
        :des "see karabiner.org for documentation.",
        :rules [
#+end_src
** right cmd => cmd+tab
press right command alone to switch to the previous app.
#+begin_src clojure
[:right_command :right_command nil {:alone :!Ctab}]
#+end_src
** caps lock alone = escape, with other keys = ctrl
#+begin_src clojure
[:##caps_lock :left_control nil {:alone :escape}]
#+end_src
** yabai-move-mode (tab + w + {hjkl})
Move the current window directionally in the yabai tiling setup.
#+begin_src clojure
:yabai-move-mode
[:h "/usr/local/bin/yabai -m window --warp west"]
[:j "/usr/local/bin/yabai -m window --warp south"]
[:k "/usr/local/bin/yabai -m window --warp north"]
[:l "/usr/local/bin/yabai -m window --warp east"]
[:b "/usr/local/bin/yabai -m space --balance"]
[:s "/usr/local/bin/yabai -m window --toggle split"]
#+end_src
   
** yabai-focus-mode (tab + f + {hjkl})
Move focus to the left/top/bottom/right of the current window.
#+begin_src clojure
:yabai-focus-mode
[:g "/usr/local/bin/yabai -m space --focus prev"]
[:h "/usr/local/bin/yabai -m window --focus west"]
[:j "/usr/local/bin/yabai -m window --focus south"]
[:k "/usr/local/bin/yabai -m window --focus north"]
[:l "/usr/local/bin/yabai -m window --focus east"]
[:semicolon "/usr/local/bin/yabai -m space --focus next"]
#+end_src

** yabai-display-mode (tab + d + {hjkl})
#+begin_src clojure
:yabai-display-mode
[:h "/usr/local/bin/yabai -m display --focus prev"]
[:j "/usr/local/bin/yabai -m window --display prev && /usr/local/bin/yabai -m display --focus prev"]
[:k "/usr/local/bin/yabai -m window --display next && /usr/local/bin/yabai -m display --focus next"]
[:l "/usr/local/bin/yabai -m display --focus next"]
#+end_src

** chrome-history-mode (tab + g + {hl})
Move backward/forward in Chrome history.
#+begin_src clojure
:chrome-history-mode
[:h :!Copen_bracket]
[:l :!Cclose_bracket]
#+end_src
** chrome-movement-mode (tab + t + {hl})
Move to the tab left/right of the current tab.
#+begin_src clojure
:chrome-movement-mode
[:h :!TStab]
[:l :!Ttab]
#+end_src
** chrome-rearrange-tab-mode (tab + r + {hl})
Move current tab left/right. Need [[https://chrome.google.com/webstore/detail/rearrange-tabs/ccnnhhnmpoffieppjjkhdakcoejcpbga][this Chrome extension]] for this to work.
#+begin_src clojure
:chrome-rearrange-tab-mode
[:h :!TSleft_arrow]
[:l :!TSright_arrow]
#+end_src
** tab-mode (tab)
Mostly for opening apps, and some other convenient shortcuts like toggling dark mode and emojis.
#+begin_src clojure
:tab-mode
[:spacebar :!CTspacebar] ;; open emoji picker
[:return_or_enter  "/usr/local/bin/yabai -m window --toggle float"]
[:3 [:km "Toggle Dark Mode"]]
[:s [:km "Open Spotify"]]
[:c [:km "Open Chrome"]]
[:k [:km "Open Keyboard Maestro"]]
[:e [:km "Open Emacs"]]
[:i [:km "Open iTerm"]]
[:m [:km "Open Messages"]]
[:comma [:km "Open Messenger"]]
[:n [:km "Open Notes"]]
[:v [:km "Open Zoom"]]
;; [:q [:km "Open Qutebrowser"]]
;; [:x [:km "Open Xcode"]]
;; [:w [:km "Open Word"]]

#+end_src
** tilde-mode
Using this mode to "focus" / "unfocus" with the [[https://heyfocus.com/][Focus]] app for MacOS.
#+begin_src clojure
:tilde-mode
[:f [:open "focus://focus?minutes=30"]]
[:t [:open "focus://toggle"]]
[:u [:open "focus://unfocus"]]
[:comma [:open "focus://preferences"]]
#+end_src

** o-key-mode
#+begin_src clojure
:o-key-mode
[:r [:km "org-roam capture"]]
#+end_src

** vim-mode (z)
#+begin_src clojure
:vim-mode
[:#Sh :left_arrow] ;; hjkl navigation everywhere + Shift
[:#Sj :down_arrow]
[:#Sk :up_arrow]
[:#Sl :right_arrow]
[:#Sb :!Oleft_arrow]
[:#Sw :!Oright_arrow]
[:delete_or_backspace :!Odelete_or_backspace]
#+end_src

** jupyter mode (j)
#+begin_src clojure
:jupyter-mode
[:l [:km "Start or Go to Existing Jupyter Lab Server"]]
[:t [:km "org-roam capture"]]
#+end_src

** end main 
#+begin_src clojure
]}] ;;end main
#+end_src
   
* Applications
#+begin_src clojure
:applications [

               :Emacs ["^org\\.gnu\\.Emacs$"]
               :Chrome ["^com\\.google\\.Chrome$", "^org\\.chromium\\.Chromium$", "^com\\.google\\.Chrome\\.canary$"]

               ]

} ;;ending bracket for whole data structure -- don't delete!
#+end_src
