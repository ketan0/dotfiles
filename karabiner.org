#+TITLE: <~~karabiner config~~>
#+AUTHOR: Ketan Agrawal
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle ~/.dotfiles/karabiner.edn
Created by Ketan Agrawal

inspiration taken from:
- [[https://github.com/yqrashawn/yqdotfiles/blob/master/.config/karabiner.edn][yqrashawn]]
- [[https://github.com/nikitavoloboev/dotfiles/blob/master/karabiner/karabiner.edn][nikitavoloboev]]
- [[https://gist.github.com/kaushikgopal/ff7a92bbc887e59699c804b59074a126][kaushikgopal]]

TODO: reorganize keyboard shortcuts into "palettes"
E.g. PAC links palette (PAC-AI, PAC mental health, notes/docs, code repo, etc.)
E.g. fun palette (typing test, fun websites, youtube, etc.)


* Guide
For more info on configuring Goku, see the [[https://github.com/yqrashawn/GokuRakuJoudo/blob/master/tutorial.md][tutorial]].
Guide lifted from [[https://gist.github.com/kaushikgopal/ff7a92bbc887e59699c804b59074a126][kaushikgopal]]. To understand better how modifiers work in karabiner, see the karabiner definition of mandatory and optional: [[https://karabiner-elements.pqrs.org/docs/json/complex-modifications-manipulator-definition/from/modifiers/#frommodifiersoptional   ][karabiner modifiers documentation]]
need to prefix C T O S F with ! or #
| Modifier | Meaning                                      |
|----------+----------------------------------------------|
| !        | mandatory (w/o modifier changes behavior)    |
| #        | optional (but at least one necessary)        |
| C        | left_command                                 |
| T        | left_control                                 |
| O        | left_option                                  |
| S        | left_shift                                   |
| F        | fn                                           |
| Q        | right_command                                |
| W        | right_control                                |
| E        | right_option                                 |
| R        | right_shift                                  |
| ##       | optional any                                 |
| !!       | command + control + optional + shift (hyper) |
* Profiles
:PROPERTIES:
:ID:       4da16544-c6d5-41e0-9445-d8b3e56f679a
:END:
#+begin_src clojure
{;;beginning bracket for whole data structure -- don't delete!
 :profiles {
            :Ketan {
                    :default true
                    :sim     500    ;; simultaneous_threshold_milliseconds (def: 50)
                    ;; keys need to be pressed within this threshold to be considered simultaneous
                    :delay   80    ;; to_delayed_action_delay_milliseconds (def: 500)
                    ;; basically it means time after which the key press is count delayed
                    :alone   500      ;; to_if_alone_timeout_milliseconds (def: 1000)
                    ;; hold for 995s and single tap registered; hold for 1005s and seen as modifier
                    :held    1000   ;; to_if_held_down_threshold_milliseconds (def: 500)
                    ;; key is fired twice when 500 ms is elapsed (otherwise seen as a hold command)
                    }
            } ;; profiles
#+end_src

* Templates
:PROPERTIES:
:ID:       32f44ec9-7fdb-4814-a592-ecb9631eed9a
:END:
#+begin_src clojure
:templates {
            :km "osascript -e 'tell application \"Keyboard Maestro Engine\" to do script \"%s\" with parameter \"%s\"'"
            ;; Removed the quotes around %s because it makes it not able to open files too
            :open "open '%s'"
            :smarturl "osascript ~/.dotfiles/open_url_smart.scpt '%s' %s"
            :openwith "open -a '%s' '%s'"
            :openhide "open '%s' -gj"
            :withsecret "source ~/.dotfiles/.secrets && %s"
            :withsecretsmarturl "source ~/.dotfiles/.secrets && osascript ~/.dotfiles/open_url_smart.scpt %s"
            :alfred "osascript -e 'tell application \"Alfred 4\" to run trigger \"%s\" in workflow \"%s\" with argument \"%s\"'"
            :wallpaper "osascript -e 'tell application \"Finder\" to set desktop picture to POSIX file \"%s\"'"
            :elisp "/opt/homebrew/bin/emacsclient --eval '(progn (select-frame-set-input-focus (selected-frame))%s)'"
            :yabai "/opt/homebrew/bin/yabai -m %s"
            :tmux "/opt/homebrew/bin/tmux %s"
            } ;; templates

#+end_src

* Layers & Simlayers
:PROPERTIES:
:ID:       63a1f5dd-d2d8-424f-96d0-833c1efda307
:END:
#+begin_src clojure
:layers {

         :tab-mode {:key :tab
                    :afterup [{:set ["yabai-move-mode" 0]}
                              {:set ["yabai-focus-mode" 0]}
                              {:set ["yabai-display-mode" 0]}
                              {:set ["yabai-adjust-mode" 0]}
                              {:set ["chrome-movement-mode" 0]}
                              {:set ["chrome-rearrange-tab-mode" 0]}]}

         :yabai-move-mode {:key :w :condi :tab-mode}
         :yabai-focus-mode {:key :f :condi :tab-mode}
         ;; :yabai-display-mode {:key :d :condi :tab-mode}
         :yabai-adjust-mode {:key :d :condi :tab-mode}
         :chrome-movement-mode {:key :t :condi :tab-mode} ;;TODO make this work
         :chrome-history-mode {:key :g :condi :tab-mode} ;;TODO make this work
         :chrome-rearrange-tab-mode {:key :r :condi :tab-mode}
         :vim-mode {:key :z}
         :tilde-mode {:key :grave_accent_and_tilde}
}

:simlayers {
        :slash-mode {:key :slash}
        :q-key-mode {:key :q}
        :x-key-mode {:key :x}
        :comma-mode {:key :comma}
        :period-mode {:key :period}
        :wallpaper-mode {:key :w}
}

#+end_src

* begin main
:PROPERTIES:
:ID:       f40c5408-e269-411c-b02a-a2054e452ed3
:END:
#+begin_src clojure
:main [{
        :des "see karabiner.org for documentation.",
        :rules [
#+end_src
* right cmd/option => previous app
:PROPERTIES:
:ID:       8a5eb4c8-1434-4c3e-83c1-3325061d5d78
:END:
Switch to the previous application with right command/option -- right command hides the current app, right option doesn't.
#+begin_src clojure
[:right_command :right_command nil {:alone [:elisp "(set-transient-map doom-leader-map)"]}]
[:right_option :right_option nil {:alone [:km "Previous Application"]}]
[:!SCm [:km "unminimize"]]
;; shift + up/down arrows = PageUp/PageDown
[:!Sup_arrow :page_up]
[:!Sdown_arrow :page_down]
#+end_src
* caps lock alone = escape, with other keys = ctrl
:PROPERTIES:
:ID:       030d326c-05a7-46c3-8da7-9cf3662fa8f6
:END:
#+begin_src clojure
[:##caps_lock :left_control nil {:alone :escape}]
#+end_src
* function keys
#+begin_src apples :tangle ~/.dotfiles/decrease_music_volume.scpt
tell application "Spotify"
    set vol to sound volume
    set vol to vol - 10
    if vol is less than 0 then
        set vol to 0
    end if
    set the sound volume to vol
end tell
#+end_src

#+begin_src apples :tangle ~/.dotfiles/increase_music_volume.scpt
tell application "Spotify"
    set vol to sound volume
    set vol to vol + 10
    if vol is greater than 100 then
        set vol to 100
    end if
    set the sound volume to vol
end tell
#+end_src

In Karabiner-Elements.app, I've checked the box "Use all F1, F2, etc. keys as standard function keys." This essentially allows me to mix in the "normal" features (volume up, volume down, etc.) with custom keybinds (org-agendas, Spotify volume up/down, etc.)
#+begin_src clojure
[:f1 :display_brightness_decrement]
[:f2 :display_brightness_increment]
[:f3 [:elisp "(ketan0/weekly-review nil)"]] ;; Past tasks
[:f4 [:elisp "(ketan0/new-agenda)"]] ;; Present tasks
[:f5 [:elisp "(ketan0/look-ahead nil)"]] ;; Future tasks
[:f7  "osascript -e 'tell application \"Spotify\" to previous track'"]
[:f8  "osascript -e 'tell application \"Spotify\" to playpause'"]
[:f9  "osascript -e 'tell application \"Spotify\" to next track'"]
[:f10 :mute]
[:f11 :volume_decrement]
[:f12 :volume_increment]
[:!Sf11  "osascript ~/.dotfiles/decrease_music_volume.scpt"]
[:!Sf12 "osascript ~/.dotfiles/increase_music_volume.scpt"]
#+end_src
* yabai-move-mode (tab + w + {hjkl})
:PROPERTIES:
:ID:       3462dbc5-e696-41ba-9ff4-c8b693f09017
:END:
Move the current window directionally in the yabai tiling setup.
#+begin_src clojure
:yabai-move-mode
[:c [:yabai "window --grid 16:10:3:1:4:12"]]
[:h [:yabai "window --warp west"]]
[:j [:yabai "window --warp south"]]
[:k [:yabai "window --warp north"]]
[:l [:yabai "window --warp east"]]
[:b [:yabai "space --balance" ]]
[:0 [:yabai "window --opacity 0.0"]]
[:1 [:yabai "window --opacity 0.1"]]
[:2 [:yabai "window --opacity 0.2"]]
[:3 [:yabai "window --opacity 0.3"]]
[:4 [:yabai "window --opacity 0.4"]]
[:5 [:yabai "window --opacity 0.5"]]
[:6 [:yabai "window --opacity 0.6"]]
[:7 [:yabai "window --opacity 0.7"]]
[:8 [:yabai "window --opacity 0.8"]]
[:9 [:yabai "window --opacity 0.9"]]
[:grave_accent_and_tilde [:yabai "window --opacity 1.0"]]
[:s [:yabai "window --toggle split"]]
#+end_src

* yabai-focus-mode (tab + f + {hjkl})
:PROPERTIES:
:ID:       7da7aa7e-0111-4717-84ea-a58ee9b6741d
:END:
Move focus to the left/top/bottom/right of the current window.
#+begin_src clojure
:yabai-focus-mode
[:g [:yabai "space --focus prev"]]
[:h [:yabai "window --focus west"]]
[:j [:yabai "window --focus south"]]
[:k [:yabai "window --focus north"]]
[:l [:yabai "window --focus east"]]
[:semicolon [:yabai "space --focus next"]]
#+end_src

* yabai-display-mode (currently unused)
:PROPERTIES:
:ID:       8ccd4df9-2f31-459c-8bea-2f6ea5649e5a
:END:
#+begin_src clojure
:yabai-display-mode
[:h [:yabai "display --focus prev"]]
[:l [:yabai "display --focus next"]]
#+end_src
* yabai-adjust-mode (tab + d + {hl})
:PROPERTIES:
:ID:       7d38a8d6-813e-417b-898e-0d023f996dca
:END:
#+begin_src clojure
:yabai-adjust-mode
[:h [:yabai "window --ratio rel:-0.05"]]
[:j [:yabai "window --ratio rel:0.05"]]
[:k [:yabai "window --ratio rel:-0.05"]]
[:l [:yabai "window --ratio rel:0.05"]]
#+end_src

* chrome-history-mode (tab + g + {hl})
:PROPERTIES:
:ID:       3954c336-fc50-49d1-a7a3-9e78eed760dd
:END:
Move backward/forward in Chrome history.
#+begin_src clojure
:chrome-history-mode
[:h :!Copen_bracket]
[:l :!Cclose_bracket]
#+end_src
* chrome-movement-mode (tab + t + {hl})
:PROPERTIES:
:ID:       957c4af0-e25f-4889-a062-4aec0aadac7f
:END:
Move to the tab left/right of the current tab.
#+begin_src clojure
:chrome-movement-mode
[:h :!TStab]
[:l :!Ttab]
#+end_src
* chrome-rearrange-tab-mode (tab + r + {hl})
:PROPERTIES:
:ID:       ce23046b-7c9c-47a5-ba39-ac951d43e157
:END:
Move current tab left/right. Need [[https://chrome.google.com/webstore/detail/rearrange-tabs/ccnnhhnmpoffieppjjkhdakcoejcpbga][this Chrome extension]] for this to work.
#+begin_src clojure
:chrome-rearrange-tab-mode
[:h :!TSleft_arrow]
[:l :!TSright_arrow]
#+end_src
* tab-mode (tab)
:PROPERTIES:
:ID:       8ba2437c-ba0d-4bc6-983e-bb5dbf026e95
:END:
Mostly for opening apps, and some other convenient shortcuts like toggling dark mode and emojis.

Toggle system dark mode, as well as the emacs theme. (See [[file:doom.d/config.el::ketan0/responsive-theme][ketan0/responsive-theme]] for details)
#+begin_src apples :tangle ~/.dotfiles/toggle_dark_mode.scpt
tell application "System Events"
    tell appearance preferences
        set dark mode to not dark mode
        do shell script "/opt/homebrew/Cellar/emacs-mac/emacs-28.1-mac-9.0/bin/emacsclient --eval '(load-theme (ketan0/responsive-theme) t)'"
    end tell
end tell
#+end_src

#+begin_src clojure
:tab-mode
[:spacebar :!CTspacebar] ;; open emoji picker
[:return_or_enter [:yabai "window --toggle float"]]
;; [:comma [:km "Open Messenger" "hide"]]
;; [:a ["open /Applications/zoom.us.app" :!SCa]]
;; [:c [:km "Open Chrome" "hide"]]
[:3 "osascript ~/.dotfiles/toggle_dark_mode.scpt"]
[:a "open /System/Library/CoreServices/Finder.app"]
[:c "open /Applications/Safari.app"]
[:x "open /Applications/Safari.app"]
[:k "open /Applications/Keyboard\\ Maestro.app"]
[:l "open /Applications/Logseq.app"]
[:e "open /Applications/Emacs.app"]
[:m "open /System/Applications/Messages.app"]
[:s "open /Applications/Spotify.app"]
[:t "open /Applications/TIDAL.app"]
[:v "open /Applications/zoom.us.app"]
;; [:n [:km "Open Neo4j" "hide"]]
;; [:q [:km "Open Qutebrowser"]]
;; [:x [:km "Open Xcode"]]
;; [:w [:km "Open Word"]]

#+end_src
* q-key-mode (q)
:PROPERTIES:
:ID:       641cd7e8-71f4-4911-ac7b-85685593a9df
:END:
#+begin_src clojure
:q-key-mode
[:a "open /System/Library/CoreServices/Finder.app"]
[:c "open /Applications/Safari.app"]
[:x "open /Applications/Safari.app"]
[:k "open /Applications/Keyboard\\ Maestro.app"]
[:k "open /Applications/Keyboard\\ Maestro.app"]
[:l "open /Applications/Logseq.app"]
[:e "open /Applications/Emacs.app"]
[:m "open /System/Applications/Messages.app"]
[:s "open /Applications/Spotify.app"]
[:t "open /Applications/TIDAL.app"]
[:v "open /Applications/zoom.us.app"]
[:w "open /System/Applications/Stickies.app"]
#+end_src
* x-key-mode (x)
:PROPERTIES:
:ID:       3f159d2c-587f-4cb0-b305-a1beb3aed923
:END:
#+begin_src js :tangle ~/.dotfiles/org_roam_capture.scpt
app = Application.currentApplication()
app.includeStandardAdditions = true
const currentTab = Application('Safari').windows[0].currentTab
const url = currentTab.url()
const name = currentTab.name()
app.openLocation(`org-protocol://roam-ref?template=r&ref=${encodeURIComponent(url)}&title=${encodeURIComponent(name)}`)
#+end_src

#+begin_src apples :tangle ~/.dotfiles/copy_topmost_safari_url.scpt
tell application "Safari"
    set theURL to URL of current tab of window 1
    set the clipboard to theURL
end tell
#+end_src

This one doesn't seem to keystroke things correctly in Emacs...e.g. the colon in the URL is typed as a semicolon...
#+begin_src apples :tangle ~/.dotfiles/copy_paste_topmost_safari_url.scpt
tell application "Safari"
    set theURL to URL of current tab of window 1
    set the clipboard to theURL
    tell application "System Events" to keystroke (the clipboard as text)
end tell
#+end_src

#+begin_src clojure
:x-key-mode
[:a [:elisp "(ketan0/new-agenda)"]]
[:c "screencapture -ic"]
[:w [:elisp "(ketan0/look-ahead nil)"]]
[:s [:elisp "(+org-capture/open-frame nil \"s\")"]]
[:t [:elisp "(+org-capture/open-frame nil \"t\")"]]
[:d [:elisp "(+org-capture/open-frame nil \"d\")"]]
[:i [:elisp "(+org-capture/open-frame nil \"i\")"]]
[:g "osascript -l JavaScript ~/.dotfiles/org_roam_capture.scpt"] ;; create new org-roam note
[:spacebar [:elisp "(+org-capture/open-frame)"]]
[:r [:elisp "(org-roam-node-random)"]]
[:j [:elisp "(org-journal-new-entry nil)"]]
[:h [:!S4 :h :spacebar :delete_or_backspace]]
[:l [:!S4 :l :spacebar :delete_or_backspace]]
[:u "osascript ~/.dotfiles/copy_topmost_safari_url.scpt"]
[:v "osascript ~/.dotfiles/copy_paste_topmost_safari_url.scpt"]
[:z [:!S4 :z :spacebar :delete_or_backspace]]
#+end_src
* tilde-mode
:PROPERTIES:
:ID:       7a27feb4-076c-43ee-abfd-3add04f4f472
:END:
Using this mode to "focus" / "unfocus" with the [[https://heyfocus.com/][Focus]] app for MacOS.

Also, toggle Do Not Disturb.
#+begin_src apples :tangle ~/.dotfiles/toggle_dnd.scpt
my setDoNoDisturbTo()

-- https://github.com/sindresorhus/do-not-disturb/issues/9
on setDoNoDisturbTo()
    set checkDNDstatusCMD to ¬
        {"defaults read", space, ¬
            "com.apple.ncprefs.plist", ¬
            space, "dnd_status"} as string
    set statusOfDND to ¬
        (do shell script checkDNDstatusCMD) ¬
            as boolean
    if not statusOfDND
        display notification "Turning on Do Not Disturb..."
        set OnOffData to "62706C6973743030D60102030405060708080A08085B646E644D6972726F7265645F100F646E64446973706C6179536C6565705F101E72657065617465644661636574696D6543616C6C73427265616B73444E445875736572507265665E646E64446973706C61794C6F636B5F10136661636574696D6543616E427265616B444E44090808D30B0C0D070F1057656E61626C6564546461746556726561736F6E093341C2B41C4FC9D3891001080808152133545D6C828384858C9499A0A1AAACAD00000000000001010000000000000013000000000000000000000000000000AE"
    else
        set OnOffData to "62706C6973743030D5010203040506070707075B646E644D6972726F7265645F100F646E64446973706C6179536C6565705F101E72657065617465644661636574696D6543616C6C73427265616B73444E445E646E64446973706C61794C6F636B5F10136661636574696D6543616E427265616B444E44090808080808131F3152617778797A7B0000000000000101000000000000000B0000000000000000000000000000007C"
    end if
    set changeDNDstatusCMD to ¬
        {"defaults write", space, ¬
            "com.apple.ncprefs.plist", ¬
            space, "dnd_prefs -data", space, OnOffData, ¬
            space, "&&", ¬
        "defaults write", space, ¬
            "com.apple.ncprefs.plist", ¬
            space, "dnd_status ", not statusOfDND, space, ¬
        "&& killall usernoted && killall ControlCenter"} as string
    do shell script changeDNDstatusCMD
    if statusOfDND
        display notification "Turned off Do Not Disturb."
    end if
end setDoNoDisturbTo
#+end_src

#+RESULTS:

#+begin_src clojure
:tilde-mode
;; switch to profile with default keyboard settings (e.g. if someone else using my computer)
[:escape "'/Library/Application Support/org.pqrs/Karabiner-Elements/bin/karabiner_cli' --select-profile 'Default keyboard'"]
[:d "osascript ~/.dotfiles/toggle_dnd.scpt"]
[:f [:openhide "focus://focus?minutes=60"]]
[:t [:openhide "focus://toggle"]]
[:u [:openhide "focus://unfocus"]]
[:comma [:open "focus://preferences"]]
#+end_src

* comma-mode
:PROPERTIES:
:ID:       2f839e85-533a-4052-96e8-10c776382f79
:END:
Just some like random stuff. Open notes, zoom links, twitter, typing tests.

Open [[https://chrome.google.com/webstore/detail/history-trends-unlimited/pnmchffiealhkdloeffcdnbgdnedheme?hl=en][History Trends Unlimited]] chrome extension
#+begin_src apples :tangle ~/.dotfiles/open_chrome_history.scpt
tell application "Google Chrome" to open location "chrome-extension://pnmchffiealhkdloeffcdnbgdnedheme/search.html"
#+end_src

Check my calendar; if there's an event with a zoom link, open the zoom link.
#+begin_src apples :tangle ~/.dotfiles/open_current_zoom_link.scpt
use script "CalendarLib EC" version "1.1.5"
use scripting additions
use framework "Foundation"

property NSRegularExpressionCaseInsensitive : a reference to 1
property NSRegularExpression : a reference to current application's NSRegularExpression

-- fetch properties of events for next week
set now to current date
set theStore to fetch store
set theCal to fetch calendar "Calendar" cal type cal exchange event store theStore -- change to suit
set theEvents to fetch events starting date now ending date now searching cals {theCal} event store theStore -- get events that are occurring currently
if length of theEvents is 0
    display notification "No events currently!"
    return
end if
set theEvent to (item 1 of theEvents)
set theEventRecord to event info for event theEvent
set theEventNotes to (get event_description of theEventRecord)
if theEventNotes is missing value
    display notification "Couldn't find the zoom link. Opening calendar..."
    tell application "Calendar" to activate
    return
end if
set theNSStringSample to current application's NSString's stringWithString:theEventNotes
set passcodePattern to "Password:(?:\\s|\\n)+(\\d{6})"
set thePasscodeRegEx to NSRegularExpression's regularExpressionWithPattern:passcodePattern options:NSRegularExpressionCaseInsensitive |error|:(missing value)
set aMatch to thePasscodeRegEx's firstMatchInString:theNSStringSample options:0 range:[0, theNSStringSample's |length|]
if aMatch is not missing value then
    set partRange to (aMatch's rangeAtIndex:1) as record
    set passcode to (theNSStringSample's substringWithRange:partRange) as text
    set the clipboard to passcode -- copy the passcode in case zoom prompts for it
else
    display notification "Couldn't find the passcode."
end if

set zoomLinkPattern to "https:\\/\\/(?:.+\\.)?zoom\\.us\\/j\\/(\\d+)\\?pwd=([a-zA-Z0-9]+)"
set theZoomLinkRegEx to NSRegularExpression's regularExpressionWithPattern:zoomLinkPattern options:NSRegularExpressionCaseInsensitive |error|:(missing value)
set aMatch to theZoomLinkRegEx's firstMatchInString:theNSStringSample options:0 range:[0, theNSStringSample's |length|]
if aMatch is not missing value then
    set partRange to (aMatch's rangeAtIndex:1) as record
    set zoomConfNo to (theNSStringSample's substringWithRange:partRange) as text
    set partRange to (aMatch's rangeAtIndex:2) as record
    set zoomPwd to (theNSStringSample's substringWithRange:partRange) as text
    display notification "Starting zoom..."
    open location "zoommtg://zoom.us/join?confno=" & zoomConfno & "&pwd=" & zoomPwd
else
    display notification "Couldn't find the zoom link. Opening calendar..."
    tell application "Calendar" to activate
end if
#+end_src

I really like Safari, but sometimes need to use Chrome for various extensions etc. Solution: have Safari => Chrome shortcut.
#+begin_src apples :tangle ~/.dotfiles/open_in_chrome.scpt
tell application "Safari"
    set theURL to URL of current tab of window 1
    tell application "Google Chrome" to open location theURL
end tell
#+end_src

Download a video from youtube with one keyboard shortcut, using the wonderful ~youtube-dl~.
#+begin_src apples :tangle ~/.dotfiles/download_video.scpt
tell application "Safari"
    set theURL to URL of current tab of window 1
    display notification "/opt/homebrew/bin/youtube-dl -o \"~/Downloads/%(title)s.%(ext)s\" '" & theURL & "'"
    do shell script "/opt/homebrew/bin/youtube-dl -o \"~/Downloads/%(title)s.%(ext)s\" '" & theURL & "'"
end tell
#+end_src

#+begin_src apples :tangle ~/.dotfiles/download_video_chrome.scpt
tell application "Google Chrome"
    set theURL to URL of active tab of first window
    display notification "/opt/homebrew/bin/youtube-dl -o \"~/Downloads/%(title)s.%(ext)s\" '" & theURL & "'"
    do shell script "/opt/homebrew/bin/youtube-dl -o \"~/Downloads/%(title)s.%(ext)s\" '" & theURL & "'"
end tell
#+end_src

My [[https://github.com/yqrashawn/GokuRakuJoudo/blob/master/tutorial.md#basic7][predefined template]] ~:smarturl~ uses the following Applescript to either: 1) navigate to the tab that contains the URL if it exists already 2) open the URL if not.
TODO: fix this. was originally designed to work on Safari, but now I switched back to Chrome
#+begin_src apples :tangle ~/.dotfiles/open_url_smart.scpt
on run (clp)
    -- given "block" argument on command line, block certain sites from 9am to 8pm
    if clp's length is 2 and clp's item 2 = "block"
        tell (current date) to set currentHour to (its hours)
        if currentHour >= 9 and currentHour < 20
            display notification "Blocked!"
            return
        end if
    end if
    -- tell application "Google Chrome"
    tell application "Safari"
        set window_list to every window
        repeat with w in window_list
            set i to 1
            set tab_list to every tab of w
            repeat with t in tab_list
                if URL of t starts with clp's item 1 then
                    set current tab of w to t
                    -- set active tab index of w to i
                    tell w
                        set index to 1
                    end tell
                    -- delay 0.05
                    -- do shell script "open -a Safari"
                    tell application "System Events"
                        -- perform action "AXRaise" of front window of application process "Google Chrome"
                        perform action "AXRaise" of front window of application process "Safari"
                    end tell
                    activate
                    return
                end if
                set i to i + 1
            end repeat
        end repeat
        open location clp's item 1
        activate
    end tell
end run
#+end_src

Activate hypothesis bookmarklet in Safari.
#+begin_src apples :tangle ~/.dotfiles/activate_hypothesis.scpt
tell application "Safari"
    do JavaScript "(function(){window.hypothesisConfig=function(){return{showHighlights:true,appType:'bookmarklet'};};var d=document,s=d.createElement('script');s.setAttribute('src','https://hypothes.is/embed.js');d.body.appendChild(s)})();" in current tab of first window
end tell
#+end_src

#+begin_src clojure
:comma-mode
[:1 [:withsecretsmarturl "$PSYCH_LECTURE_LINK"]]
[:3 [:withsecret "open $PAC_PROJECT_ZOOM_LINK"]]
;; add title bar to frame
;; (I use the --with-no-title-bars patch for emacs-mac, but sometimes I like the title bar)
[:a [:elisp "(setq mac-use-title-bar t)(setq ketan0/old-frame (selected-frame)) (make-frame)(delete-frame ketan0/old-frame)"]]
[:b "osascript ~/.dotfiles/open_in_chrome.scpt"]
[:c [:open "/Users/ketanagrawal/garden-simple/org/private/capture.org"]]
[:d [:smarturl "https://drive.google.com/"]]
[:o [:open "http://doc.new"]] ;; new google doc
[:e [:open "/Users/ketanagrawal/.dotfiles/doom.d/config.el"]]
[:f [:smarturl "https://www.keyhero.com/free-typing-test/" "block"]]
;; [:h [:km "Github => Emacs"]]
;; [:h "osascript /Users/ketanagrawal/.dotfiles/open_chrome_history.scpt"]
[:h "osascript /Users/ketanagrawal/.dotfiles/activate_hypothesis.scpt"]

[:i [:smarturl "https://www.keyhero.com/typing-instant-death/" "block"]]
[:j [:smarturl "http://localhost:8888"]] ;; the port I usually run JupyterLab on
[:l "osascript /Users/ketanagrawal/.dotfiles/open_current_zoom_link.scpt"]
[:m [:smarturl "https://mail.google.com/"]]
;; [:n [:openwith "Google Chrome" "https://www.netflix.com/title/80199128"]]
[:n [:smarturl "https://nebula.ketan.me"]]
[:t "osascript /Users/ketanagrawal/.dotfiles/download_video_chrome.scpt"]
[:u "osascript /Users/ketanagrawal/.dotfiles/download_video.scpt"]
[:p [:withsecretsmarturl "$PAC_PROGRESS_DOC_LINK"]]
[:q [:withsecretsmarturl "$HCI_PROGRESS_DOC_LINK"]]
[:t [:smarturl "https://twitter.com/i/bookmarks" "block"]]
[:r [:open "/Users/ketanagrawal/garden-simple/org/private/todos.org"]]
[:s [:open "/Users/ketanagrawal/.dotfiles/karabiner.org"]]
[:v [:open "https://home.color.com/sign-in?next=%2Fcovid%2Factivation"]]
;; [:v [:openwith "Emacs" "/Users/ketanagrawal/Dropbox/Apps/GoodNotes 5/GoodNotes/vision.pdf"]]
[:y [:openwith "Emacs" "/Users/ketanagrawal/.dotfiles/yabairc"]]
[:z [:withsecret "open $MY_ZOOM_LINK"]]
#+end_src
* period-mode
Access various tag-specific Org Agendas.
#+begin_src clojure
:period-mode
[:t [:elisp "(ketan0/area-agenda \"tinker\")"]]
[:a [:elisp "(ketan0/area-agenda \"academic\")"]]
[:s [:elisp "(ketan0/area-agenda \"social\")"]]
;; start JupyterLab server in detached tmux pane
[:j [:tmux "new-session -d -s jupyter 'cd ~ && /Users/ketanagrawal/miniconda3/bin/jupyter-lab'"]]
;; start development server for Digital Nebula in detached tmux pane
;; TODO: this is not working
[:n [:tmux "new-session -d -s nebula '~/.nvm/versions/node/v14.18.2/bin/live-server --port=3000 ~/garden-simple/html'"]]
[:k [:elisp "(ketan0/area-agenda \"knowledge\")"]]
[:p [:elisp "(ketan0/area-agenda \"projects\")"]]
[:r [:elisp "(ketan0/area-agenda \"research\")"]]
#+end_src
* wallpaper-mode
:PROPERTIES:
:ID:       0a217b5a-4bca-46bf-9482-affde5df2652
:END:
#+begin_src clojure
:wallpaper-mode
[:g [:wallpaper "/System/Library/Desktop Pictures/Solar Gradients.heic"]]
[:s [:wallpaper "/Users/ketanagrawal/Desktop/wallpapers/simple-subtle-abstract-dark-minimalism-4k-u9.jpg"]]
[:x [:wallpaper "/Users/ketanagrawal/Desktop/wallpapers/paint_colorful_overlay_139992_1440x900.jpg"]]
[:y [:wallpaper "/Users/ketanagrawal/Desktop/wallpapers/background_paint_stains_light_76087_1440x900.jpg"]]

#+end_src
* vim-mode (z)
:PROPERTIES:
:ID:       9c2ae9d6-f08b-4538-ab1a-7674f1c7d2c7
:END:
#+begin_src clojure
:vim-mode
[:##h :left_arrow] ;; hjkl navigation everywhere + Shift
[:##j :down_arrow]
[:##k :up_arrow]
[:##l :right_arrow]
[:##b :!Oleft_arrow]
[:##w :!Oright_arrow]
[:delete_or_backspace :!Odelete_or_backspace]
#+end_src
* end main
:PROPERTIES:
:ID:       6d6e59dc-0a07-462f-bcf2-0da725ebb0a6
:END:
#+begin_src clojure
]}] ;;end main
#+end_src

* Applications
:PROPERTIES:
:ID:       14198291-c081-4c5f-b4cf-91fbc022ad2c
:END:
#+begin_src clojure
:applications [

               :Emacs ["^org\\.gnu\\.Emacs$"]
               :Chrome ["^com\\.google\\.Chrome$", "^org\\.chromium\\.Chromium$", "^com\\.google\\.Chrome\\.canary$"]

               ]

} ;;ending bracket for whole data structure -- don't delete!
#+end_src
